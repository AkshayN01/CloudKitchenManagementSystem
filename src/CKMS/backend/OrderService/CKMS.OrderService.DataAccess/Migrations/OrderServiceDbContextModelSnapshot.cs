// <auto-generated />
using System;
using CKMS.OrderService.DataAccess.Repository;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace CKMS.OrderService.DataAccess.Migrations
{
    [DbContext(typeof(OrderServiceDbContext))]
    partial class OrderServiceDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("CKMS.Contracts.DBModels.AuditTable", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("EntityId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("EntityType")
                        .HasColumnType("integer");

                    b.Property<int>("HTTPStatus")
                        .HasColumnType("integer");

                    b.Property<int>("IsSent")
                        .HasColumnType("integer");

                    b.Property<DateTime>("LastUpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Payload")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Audit");
                });

            modelBuilder.Entity("CKMS.Contracts.DBModels.OrderService.Discount", b =>
                {
                    b.Property<Guid>("DiscountId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CouponCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("DiscountType")
                        .HasColumnType("integer");

                    b.Property<float>("DiscountValue")
                        .HasColumnType("real");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("IsActive")
                        .HasColumnType("integer");

                    b.Property<int>("IsPersonalised")
                        .HasColumnType("integer");

                    b.Property<Guid>("KitchenId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("UsageCount")
                        .HasColumnType("integer");

                    b.HasKey("DiscountId");

                    b.HasIndex("CouponCode")
                        .IsUnique();

                    b.ToTable("Discounts");
                });

            modelBuilder.Entity("CKMS.Contracts.DBModels.OrderService.DiscountUsage", b =>
                {
                    b.Property<Guid>("UsageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("DiscountId")
                        .HasColumnType("uuid");

                    b.Property<int>("IsApplied")
                        .HasColumnType("integer");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("UsageId");

                    b.HasIndex("DiscountId");

                    b.HasIndex("OrderId")
                        .IsUnique();

                    b.ToTable("DiscountUsages");
                });

            modelBuilder.Entity("CKMS.Contracts.DBModels.OrderService.Order", b =>
                {
                    b.Property<Guid>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("Address")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeliveryTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<double>("GrossAmount")
                        .HasColumnType("double precision");

                    b.Property<DateTime?>("InProgressTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("KitchenId")
                        .HasColumnType("uuid");

                    b.Property<double>("NetAmount")
                        .HasColumnType("double precision");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("OutForDeliveryTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("OrderId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("CKMS.Contracts.DBModels.OrderService.OrderItem", b =>
                {
                    b.Property<Guid>("OrderItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<long>("MenuItemId")
                        .HasColumnType("bigint");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uuid");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.HasKey("OrderItemId");

                    b.HasIndex("OrderId");

                    b.ToTable("OrderItems");
                });

            modelBuilder.Entity("CKMS.Contracts.DBModels.OrderService.Payment", b =>
                {
                    b.Property<Guid>("PaymentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<double>("Amount")
                        .HasColumnType("double precision");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("PaymentMethod")
                        .HasColumnType("integer");

                    b.Property<int>("PaymentStatus")
                        .HasColumnType("integer");

                    b.HasKey("PaymentId");

                    b.HasIndex("OrderId")
                        .IsUnique();

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("CKMS.Contracts.DBModels.OrderService.PersonalDiscounts", b =>
                {
                    b.Property<Guid>("PersonalDiscountId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("DiscountId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("PersonalDiscountId");

                    b.HasIndex("DiscountId");

                    b.ToTable("PersonalDiscounts");
                });

            modelBuilder.Entity("CKMS.Contracts.DBModels.OrderService.DiscountUsage", b =>
                {
                    b.HasOne("CKMS.Contracts.DBModels.OrderService.Discount", "Discount")
                        .WithMany("DiscountUsages")
                        .HasForeignKey("DiscountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CKMS.Contracts.DBModels.OrderService.Order", "Order")
                        .WithOne("DiscountUsage")
                        .HasForeignKey("CKMS.Contracts.DBModels.OrderService.DiscountUsage", "OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Discount");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("CKMS.Contracts.DBModels.OrderService.OrderItem", b =>
                {
                    b.HasOne("CKMS.Contracts.DBModels.OrderService.Order", "Order")
                        .WithMany("Items")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");
                });

            modelBuilder.Entity("CKMS.Contracts.DBModels.OrderService.Payment", b =>
                {
                    b.HasOne("CKMS.Contracts.DBModels.OrderService.Order", "Order")
                        .WithOne("Payment")
                        .HasForeignKey("CKMS.Contracts.DBModels.OrderService.Payment", "OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");
                });

            modelBuilder.Entity("CKMS.Contracts.DBModels.OrderService.PersonalDiscounts", b =>
                {
                    b.HasOne("CKMS.Contracts.DBModels.OrderService.Discount", "Discount")
                        .WithMany("PersonalDiscounts")
                        .HasForeignKey("DiscountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Discount");
                });

            modelBuilder.Entity("CKMS.Contracts.DBModels.OrderService.Discount", b =>
                {
                    b.Navigation("DiscountUsages");

                    b.Navigation("PersonalDiscounts");
                });

            modelBuilder.Entity("CKMS.Contracts.DBModels.OrderService.Order", b =>
                {
                    b.Navigation("DiscountUsage");

                    b.Navigation("Items");

                    b.Navigation("Payment");
                });
#pragma warning restore 612, 618
        }
    }
}
